// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ProxyTrade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProxyTrade entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProxyTrade entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProxyTrade", id.toString(), this);
  }

  static load(id: string): ProxyTrade | null {
    return store.get("ProxyTrade", id) as ProxyTrade | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trader(): string {
    let value = this.get("trader");
    return value.toString();
  }

  set trader(value: string) {
    this.set("trader", Value.fromString(value));
  }

  get src(): string {
    let value = this.get("src");
    return value.toString();
  }

  set src(value: string) {
    this.set("src", Value.fromString(value));
  }

  get dest(): string {
    let value = this.get("dest");
    return value.toString();
  }

  set dest(value: string) {
    this.set("dest", Value.fromString(value));
  }

  get actualSrcAmount(): BigInt {
    let value = this.get("actualSrcAmount");
    return value.toBigInt();
  }

  set actualSrcAmount(value: BigInt) {
    this.set("actualSrcAmount", Value.fromBigInt(value));
  }

  get actualDestAmount(): BigInt {
    let value = this.get("actualDestAmount");
    return value.toBigInt();
  }

  set actualDestAmount(value: BigInt) {
    this.set("actualDestAmount", Value.fromBigInt(value));
  }

  get createdAtBlockTimestamp(): BigInt {
    let value = this.get("createdAtBlockTimestamp");
    return value.toBigInt();
  }

  set createdAtBlockTimestamp(value: BigInt) {
    this.set("createdAtBlockTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get createdAtLogIndex(): BigInt {
    let value = this.get("createdAtLogIndex");
    return value.toBigInt();
  }

  set createdAtLogIndex(value: BigInt) {
    this.set("createdAtLogIndex", Value.fromBigInt(value));
  }

  get createdAtTransactionHash(): string {
    let value = this.get("createdAtTransactionHash");
    return value.toString();
  }

  set createdAtTransactionHash(value: string) {
    this.set("createdAtTransactionHash", Value.fromString(value));
  }
}

export class ReserveTrade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ReserveTrade entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReserveTrade entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReserveTrade", id.toString(), this);
  }

  static load(id: string): ReserveTrade | null {
    return store.get("ReserveTrade", id) as ReserveTrade | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get src(): string {
    let value = this.get("src");
    return value.toString();
  }

  set src(value: string) {
    this.set("src", Value.fromString(value));
  }

  get dest(): string {
    let value = this.get("dest");
    return value.toString();
  }

  set dest(value: string) {
    this.set("dest", Value.fromString(value));
  }

  get srcAmount(): BigInt {
    let value = this.get("srcAmount");
    return value.toBigInt();
  }

  set srcAmount(value: BigInt) {
    this.set("srcAmount", Value.fromBigInt(value));
  }

  get destAmount(): BigInt {
    let value = this.get("destAmount");
    return value.toBigInt();
  }

  set destAmount(value: BigInt) {
    this.set("destAmount", Value.fromBigInt(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get createdAtBlockTimestamp(): BigInt {
    let value = this.get("createdAtBlockTimestamp");
    return value.toBigInt();
  }

  set createdAtBlockTimestamp(value: BigInt) {
    this.set("createdAtBlockTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get createdAtLogIndex(): BigInt {
    let value = this.get("createdAtLogIndex");
    return value.toBigInt();
  }

  set createdAtLogIndex(value: BigInt) {
    this.set("createdAtLogIndex", Value.fromBigInt(value));
  }

  get createdAtTransactionHash(): string {
    let value = this.get("createdAtTransactionHash");
    return value.toString();
  }

  set createdAtTransactionHash(value: string) {
    this.set("createdAtTransactionHash", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trades(): Array<string> | null {
    let value = this.get("trades");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set trades(value: Array<string> | null) {
    if (value === null) {
      this.unset("trades");
    } else {
      this.set("trades", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Reserve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Reserve entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Reserve entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Reserve", id.toString(), this);
  }

  static load(id: string): Reserve | null {
    return store.get("Reserve", id) as Reserve | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isPermissionless(): boolean {
    let value = this.get("isPermissionless");
    return value.toBoolean();
  }

  set isPermissionless(value: boolean) {
    this.set("isPermissionless", Value.fromBoolean(value));
  }

  get isRemoved(): boolean {
    let value = this.get("isRemoved");
    return value.toBoolean();
  }

  set isRemoved(value: boolean) {
    this.set("isRemoved", Value.fromBoolean(value));
  }

  get isTradeEnabled(): boolean {
    let value = this.get("isTradeEnabled");
    return value.toBoolean();
  }

  set isTradeEnabled(value: boolean) {
    this.set("isTradeEnabled", Value.fromBoolean(value));
  }

  get network(): string {
    let value = this.get("network");
    return value.toString();
  }

  set network(value: string) {
    this.set("network", Value.fromString(value));
  }

  get rateContract(): string | null {
    let value = this.get("rateContract");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rateContract(value: string | null) {
    if (value === null) {
      this.unset("rateContract");
    } else {
      this.set("rateContract", Value.fromString(value as string));
    }
  }

  get sanityContract(): string | null {
    let value = this.get("sanityContract");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sanityContract(value: string | null) {
    if (value === null) {
      this.unset("sanityContract");
    } else {
      this.set("sanityContract", Value.fromString(value as string));
    }
  }

  get tokenBalances(): Array<string> | null {
    let value = this.get("tokenBalances");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokenBalances(value: Array<string> | null) {
    if (value === null) {
      this.unset("tokenBalances");
    } else {
      this.set("tokenBalances", Value.fromStringArray(value as Array<string>));
    }
  }

  get tradingPairs(): Array<string> | null {
    let value = this.get("tradingPairs");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tradingPairs(value: Array<string> | null) {
    if (value === null) {
      this.unset("tradingPairs");
    } else {
      this.set("tradingPairs", Value.fromStringArray(value as Array<string>));
    }
  }

  get trades(): Array<string> | null {
    let value = this.get("trades");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set trades(value: Array<string> | null) {
    if (value === null) {
      this.unset("trades");
    } else {
      this.set("trades", Value.fromStringArray(value as Array<string>));
    }
  }

  get createdAtBlockTimestamp(): BigInt {
    let value = this.get("createdAtBlockTimestamp");
    return value.toBigInt();
  }

  set createdAtBlockTimestamp(value: BigInt) {
    this.set("createdAtBlockTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get createdAtLogIndex(): BigInt {
    let value = this.get("createdAtLogIndex");
    return value.toBigInt();
  }

  set createdAtLogIndex(value: BigInt) {
    this.set("createdAtLogIndex", Value.fromBigInt(value));
  }

  get createdAtTransactionHash(): string {
    let value = this.get("createdAtTransactionHash");
    return value.toString();
  }

  set createdAtTransactionHash(value: string) {
    this.set("createdAtTransactionHash", Value.fromString(value));
  }
}

export class Network extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Network entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Network entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Network", id.toString(), this);
  }

  static load(id: string): Network | null {
    return store.get("Network", id) as Network | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proxy(): string {
    let value = this.get("proxy");
    return value.toString();
  }

  set proxy(value: string) {
    this.set("proxy", Value.fromString(value));
  }

  get isCurrentNetwork(): boolean {
    let value = this.get("isCurrentNetwork");
    return value.toBoolean();
  }

  set isCurrentNetwork(value: boolean) {
    this.set("isCurrentNetwork", Value.fromBoolean(value));
  }

  get isEnabled(): boolean {
    let value = this.get("isEnabled");
    return value.toBoolean();
  }

  set isEnabled(value: boolean) {
    this.set("isEnabled", Value.fromBoolean(value));
  }

  get reserves(): Array<string> | null {
    let value = this.get("reserves");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set reserves(value: Array<string> | null) {
    if (value === null) {
      this.unset("reserves");
    } else {
      this.set("reserves", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class TradingPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TradingPair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TradingPair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TradingPair", id.toString(), this);
  }

  static load(id: string): TradingPair | null {
    return store.get("TradingPair", id) as TradingPair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get src(): string {
    let value = this.get("src");
    return value.toString();
  }

  set src(value: string) {
    this.set("src", Value.fromString(value));
  }

  get dest(): string {
    let value = this.get("dest");
    return value.toString();
  }

  set dest(value: string) {
    this.set("dest", Value.fromString(value));
  }

  get isTradingPairEnabled(): boolean {
    let value = this.get("isTradingPairEnabled");
    return value.toBoolean();
  }

  set isTradingPairEnabled(value: boolean) {
    this.set("isTradingPairEnabled", Value.fromBoolean(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reserveBalances(): Array<string> | null {
    let value = this.get("reserveBalances");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set reserveBalances(value: Array<string> | null) {
    if (value === null) {
      this.unset("reserveBalances");
    } else {
      this.set(
        "reserveBalances",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }
}

export class ReserveTokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ReserveTokenBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReserveTokenBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReserveTokenBalance", id.toString(), this);
  }

  static load(id: string): ReserveTokenBalance | null {
    return store.get("ReserveTokenBalance", id) as ReserveTokenBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }
}
