// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class EtherReceival extends EthereumEvent {
  get params(): EtherReceival__Params {
    return new EtherReceival__Params(this);
  }
}

export class EtherReceival__Params {
  _event: EtherReceival;

  constructor(event: EtherReceival) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AddReserveToNetwork extends EthereumEvent {
  get params(): AddReserveToNetwork__Params {
    return new AddReserveToNetwork__Params(this);
  }
}

export class AddReserveToNetwork__Params {
  _event: AddReserveToNetwork;

  constructor(event: AddReserveToNetwork) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get add(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get isPermissionless(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class AddReserveToNetwork1 extends EthereumEvent {
  get params(): AddReserveToNetwork1__Params {
    return new AddReserveToNetwork1__Params(this);
  }
}

export class AddReserveToNetwork1__Params {
  _event: AddReserveToNetwork1;

  constructor(event: AddReserveToNetwork1) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get add(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class RemoveReserveFromNetwork extends EthereumEvent {
  get params(): RemoveReserveFromNetwork__Params {
    return new RemoveReserveFromNetwork__Params(this);
  }
}

export class RemoveReserveFromNetwork__Params {
  _event: RemoveReserveFromNetwork;

  constructor(event: RemoveReserveFromNetwork) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ListReservePairs extends EthereumEvent {
  get params(): ListReservePairs__Params {
    return new ListReservePairs__Params(this);
  }
}

export class ListReservePairs__Params {
  _event: ListReservePairs;

  constructor(event: ListReservePairs) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get src(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dest(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get add(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class ListReservePairs1 extends EthereumEvent {
  get params(): ListReservePairs1__Params {
    return new ListReservePairs1__Params(this);
  }
}

export class ListReservePairs1__Params {
  _event: ListReservePairs1;

  constructor(event: ListReservePairs1) {
    this._event = event;
  }

  get reserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get src(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dest(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get add(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class WhiteListContractSet extends EthereumEvent {
  get params(): WhiteListContractSet__Params {
    return new WhiteListContractSet__Params(this);
  }
}

export class WhiteListContractSet__Params {
  _event: WhiteListContractSet;

  constructor(event: WhiteListContractSet) {
    this._event = event;
  }

  get newContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get currentContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ExpectedRateContractSet extends EthereumEvent {
  get params(): ExpectedRateContractSet__Params {
    return new ExpectedRateContractSet__Params(this);
  }
}

export class ExpectedRateContractSet__Params {
  _event: ExpectedRateContractSet;

  constructor(event: ExpectedRateContractSet) {
    this._event = event;
  }

  get newContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get currentContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FeeBurnerContractSet extends EthereumEvent {
  get params(): FeeBurnerContractSet__Params {
    return new FeeBurnerContractSet__Params(this);
  }
}

export class FeeBurnerContractSet__Params {
  _event: FeeBurnerContractSet;

  constructor(event: FeeBurnerContractSet) {
    this._event = event;
  }

  get newContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get currentContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class KyberNetwrokParamsSet extends EthereumEvent {
  get params(): KyberNetwrokParamsSet__Params {
    return new KyberNetwrokParamsSet__Params(this);
  }
}

export class KyberNetwrokParamsSet__Params {
  _event: KyberNetwrokParamsSet;

  constructor(event: KyberNetwrokParamsSet) {
    this._event = event;
  }

  get maxGasPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get negligibleRateDiff(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class KyberNetworkSetEnable extends EthereumEvent {
  get params(): KyberNetworkSetEnable__Params {
    return new KyberNetworkSetEnable__Params(this);
  }
}

export class KyberNetworkSetEnable__Params {
  _event: KyberNetworkSetEnable;

  constructor(event: KyberNetworkSetEnable) {
    this._event = event;
  }

  get isEnabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class KyberProxySet extends EthereumEvent {
  get params(): KyberProxySet__Params {
    return new KyberProxySet__Params(this);
  }
}

export class KyberProxySet__Params {
  _event: KyberProxySet;

  constructor(event: KyberProxySet) {
    this._event = event;
  }

  get proxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class KyberTrade extends EthereumEvent {
  get params(): KyberTrade__Params {
    return new KyberTrade__Params(this);
  }
}

export class KyberTrade__Params {
  _event: KyberTrade;

  constructor(event: KyberTrade) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get src(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dest(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get srcAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get dstAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get destAddress(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get ethWeiValue(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get reserve1(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get reserve2(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get hint(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }
}

export class TokenWithdraw extends EthereumEvent {
  get params(): TokenWithdraw__Params {
    return new TokenWithdraw__Params(this);
  }
}

export class TokenWithdraw__Params {
  _event: TokenWithdraw;

  constructor(event: TokenWithdraw) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sendTo(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class EtherWithdraw extends EthereumEvent {
  get params(): EtherWithdraw__Params {
    return new EtherWithdraw__Params(this);
  }
}

export class EtherWithdraw__Params {
  _event: EtherWithdraw;

  constructor(event: EtherWithdraw) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sendTo(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferAdminPending extends EthereumEvent {
  get params(): TransferAdminPending__Params {
    return new TransferAdminPending__Params(this);
  }
}

export class TransferAdminPending__Params {
  _event: TransferAdminPending;

  constructor(event: TransferAdminPending) {
    this._event = event;
  }

  get pendingAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AdminClaimed extends EthereumEvent {
  get params(): AdminClaimed__Params {
    return new AdminClaimed__Params(this);
  }
}

export class AdminClaimed__Params {
  _event: AdminClaimed;

  constructor(event: AdminClaimed) {
    this._event = event;
  }

  get newAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AlerterAdded extends EthereumEvent {
  get params(): AlerterAdded__Params {
    return new AlerterAdded__Params(this);
  }
}

export class AlerterAdded__Params {
  _event: AlerterAdded;

  constructor(event: AlerterAdded) {
    this._event = event;
  }

  get newAlerter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isAdd(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OperatorAdded extends EthereumEvent {
  get params(): OperatorAdded__Params {
    return new OperatorAdded__Params(this);
  }
}

export class OperatorAdded__Params {
  _event: OperatorAdded;

  constructor(event: OperatorAdded) {
    this._event = event;
  }

  get newOperator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isAdd(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class KyberNetwork__searchBestRateResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class KyberNetwork__findBestRateOnlyPermissionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class KyberNetwork__getExpectedRateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class KyberNetwork__getExpectedRateOnlyPermissionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class KyberNetwork__findBestRateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class KyberNetwork extends SmartContract {
  static bind(address: Address): KyberNetwork {
    return new KyberNetwork("KyberNetwork", address);
  }

  getReserves(): Array<Address> {
    let result = super.call("getReserves", []);

    return result[0].toAddressArray();
  }

  try_getReserves(): CallResult<Array<Address>> {
    let result = super.tryCall("getReserves", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddressArray());
  }

  searchBestRate(
    src: Address,
    dest: Address,
    srcAmount: BigInt,
    usePermissionless: boolean
  ): KyberNetwork__searchBestRateResult {
    let result = super.call("searchBestRate", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dest),
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromBoolean(usePermissionless)
    ]);

    return new KyberNetwork__searchBestRateResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_searchBestRate(
    src: Address,
    dest: Address,
    srcAmount: BigInt,
    usePermissionless: boolean
  ): CallResult<KyberNetwork__searchBestRateResult> {
    let result = super.tryCall("searchBestRate", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dest),
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromBoolean(usePermissionless)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new KyberNetwork__searchBestRateResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  infoFields(param0: Bytes): BigInt {
    let result = super.call("infoFields", [
      EthereumValue.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_infoFields(param0: Bytes): CallResult<BigInt> {
    let result = super.tryCall("infoFields", [
      EthereumValue.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  findBestRateOnlyPermission(
    src: Address,
    dest: Address,
    srcAmount: BigInt
  ): KyberNetwork__findBestRateOnlyPermissionResult {
    let result = super.call("findBestRateOnlyPermission", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dest),
      EthereumValue.fromUnsignedBigInt(srcAmount)
    ]);

    return new KyberNetwork__findBestRateOnlyPermissionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_findBestRateOnlyPermission(
    src: Address,
    dest: Address,
    srcAmount: BigInt
  ): CallResult<KyberNetwork__findBestRateOnlyPermissionResult> {
    let result = super.tryCall("findBestRateOnlyPermission", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dest),
      EthereumValue.fromUnsignedBigInt(srcAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new KyberNetwork__findBestRateOnlyPermissionResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  enabled(): boolean {
    let result = super.call("enabled", []);

    return result[0].toBoolean();
  }

  try_enabled(): CallResult<boolean> {
    let result = super.tryCall("enabled", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  removeReserve(reserve: Address, index: BigInt): boolean {
    let result = super.call("removeReserve", [
      EthereumValue.fromAddress(reserve),
      EthereumValue.fromUnsignedBigInt(index)
    ]);

    return result[0].toBoolean();
  }

  try_removeReserve(reserve: Address, index: BigInt): CallResult<boolean> {
    let result = super.tryCall("removeReserve", [
      EthereumValue.fromAddress(reserve),
      EthereumValue.fromUnsignedBigInt(index)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  pendingAdmin(): Address {
    let result = super.call("pendingAdmin", []);

    return result[0].toAddress();
  }

  try_pendingAdmin(): CallResult<Address> {
    let result = super.tryCall("pendingAdmin", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getOperators(): Array<Address> {
    let result = super.call("getOperators", []);

    return result[0].toAddressArray();
  }

  try_getOperators(): CallResult<Array<Address>> {
    let result = super.tryCall("getOperators", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddressArray());
  }

  reservesPerTokenSrc(param0: Address, param1: BigInt): Address {
    let result = super.call("reservesPerTokenSrc", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromUnsignedBigInt(param1)
    ]);

    return result[0].toAddress();
  }

  try_reservesPerTokenSrc(
    param0: Address,
    param1: BigInt
  ): CallResult<Address> {
    let result = super.tryCall("reservesPerTokenSrc", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  maxGasPrice(): BigInt {
    let result = super.call("maxGasPrice", []);

    return result[0].toBigInt();
  }

  try_maxGasPrice(): CallResult<BigInt> {
    let result = super.tryCall("maxGasPrice", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  negligibleRateDiff(): BigInt {
    let result = super.call("negligibleRateDiff", []);

    return result[0].toBigInt();
  }

  try_negligibleRateDiff(): CallResult<BigInt> {
    let result = super.tryCall("negligibleRateDiff", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  feeBurnerContract(): Address {
    let result = super.call("feeBurnerContract", []);

    return result[0].toAddress();
  }

  try_feeBurnerContract(): CallResult<Address> {
    let result = super.tryCall("feeBurnerContract", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  expectedRateContract(): Address {
    let result = super.call("expectedRateContract", []);

    return result[0].toAddress();
  }

  try_expectedRateContract(): CallResult<Address> {
    let result = super.tryCall("expectedRateContract", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  whiteListContract(): Address {
    let result = super.call("whiteListContract", []);

    return result[0].toAddress();
  }

  try_whiteListContract(): CallResult<Address> {
    let result = super.tryCall("whiteListContract", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getUserCapInWei(user: Address): BigInt {
    let result = super.call("getUserCapInWei", [
      EthereumValue.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getUserCapInWei(user: Address): CallResult<BigInt> {
    let result = super.tryCall("getUserCapInWei", [
      EthereumValue.fromAddress(user)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isEnabled(): boolean {
    let result = super.call("isEnabled", []);

    return result[0].toBoolean();
  }

  try_isEnabled(): CallResult<boolean> {
    let result = super.tryCall("isEnabled", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  reserveType(param0: Address): i32 {
    let result = super.call("reserveType", [EthereumValue.fromAddress(param0)]);

    return result[0].toI32();
  }

  try_reserveType(param0: Address): CallResult<i32> {
    let result = super.tryCall("reserveType", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  kyberNetworkProxyContract(): Address {
    let result = super.call("kyberNetworkProxyContract", []);

    return result[0].toAddress();
  }

  try_kyberNetworkProxyContract(): CallResult<Address> {
    let result = super.tryCall("kyberNetworkProxyContract", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getAlerters(): Array<Address> {
    let result = super.call("getAlerters", []);

    return result[0].toAddressArray();
  }

  try_getAlerters(): CallResult<Array<Address>> {
    let result = super.tryCall("getAlerters", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddressArray());
  }

  getExpectedRate(
    src: Address,
    dest: Address,
    srcQty: BigInt
  ): KyberNetwork__getExpectedRateResult {
    let result = super.call("getExpectedRate", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dest),
      EthereumValue.fromUnsignedBigInt(srcQty)
    ]);

    return new KyberNetwork__getExpectedRateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getExpectedRate(
    src: Address,
    dest: Address,
    srcQty: BigInt
  ): CallResult<KyberNetwork__getExpectedRateResult> {
    let result = super.tryCall("getExpectedRate", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dest),
      EthereumValue.fromUnsignedBigInt(srcQty)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new KyberNetwork__getExpectedRateResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  reserves(param0: BigInt): Address {
    let result = super.call("reserves", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_reserves(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("reserves", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getExpectedRateOnlyPermission(
    src: Address,
    dest: Address,
    srcQty: BigInt
  ): KyberNetwork__getExpectedRateOnlyPermissionResult {
    let result = super.call("getExpectedRateOnlyPermission", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dest),
      EthereumValue.fromUnsignedBigInt(srcQty)
    ]);

    return new KyberNetwork__getExpectedRateOnlyPermissionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getExpectedRateOnlyPermission(
    src: Address,
    dest: Address,
    srcQty: BigInt
  ): CallResult<KyberNetwork__getExpectedRateOnlyPermissionResult> {
    let result = super.tryCall("getExpectedRateOnlyPermission", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dest),
      EthereumValue.fromUnsignedBigInt(srcQty)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new KyberNetwork__getExpectedRateOnlyPermissionResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  PERM_HINT(): Bytes {
    let result = super.call("PERM_HINT", []);

    return result[0].toBytes();
  }

  try_PERM_HINT(): CallResult<Bytes> {
    let result = super.tryCall("PERM_HINT", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getUserCapInTokenWei(user: Address, token: Address): BigInt {
    let result = super.call("getUserCapInTokenWei", [
      EthereumValue.fromAddress(user),
      EthereumValue.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_getUserCapInTokenWei(user: Address, token: Address): CallResult<BigInt> {
    let result = super.tryCall("getUserCapInTokenWei", [
      EthereumValue.fromAddress(user),
      EthereumValue.fromAddress(token)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  reservesPerTokenDest(param0: Address, param1: BigInt): Address {
    let result = super.call("reservesPerTokenDest", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromUnsignedBigInt(param1)
    ]);

    return result[0].toAddress();
  }

  try_reservesPerTokenDest(
    param0: Address,
    param1: BigInt
  ): CallResult<Address> {
    let result = super.tryCall("reservesPerTokenDest", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  addReserve(reserve: Address, isPermissionless: boolean): boolean {
    let result = super.call("addReserve", [
      EthereumValue.fromAddress(reserve),
      EthereumValue.fromBoolean(isPermissionless)
    ]);

    return result[0].toBoolean();
  }

  try_addReserve(
    reserve: Address,
    isPermissionless: boolean
  ): CallResult<boolean> {
    let result = super.tryCall("addReserve", [
      EthereumValue.fromAddress(reserve),
      EthereumValue.fromBoolean(isPermissionless)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  maxGasPriceValue(): BigInt {
    let result = super.call("maxGasPriceValue", []);

    return result[0].toBigInt();
  }

  try_maxGasPriceValue(): CallResult<BigInt> {
    let result = super.tryCall("maxGasPriceValue", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  info(field: Bytes): BigInt {
    let result = super.call("info", [EthereumValue.fromFixedBytes(field)]);

    return result[0].toBigInt();
  }

  try_info(field: Bytes): CallResult<BigInt> {
    let result = super.tryCall("info", [EthereumValue.fromFixedBytes(field)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  findBestRate(
    src: Address,
    dest: Address,
    srcAmount: BigInt
  ): KyberNetwork__findBestRateResult {
    let result = super.call("findBestRate", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dest),
      EthereumValue.fromUnsignedBigInt(srcAmount)
    ]);

    return new KyberNetwork__findBestRateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_findBestRate(
    src: Address,
    dest: Address,
    srcAmount: BigInt
  ): CallResult<KyberNetwork__findBestRateResult> {
    let result = super.tryCall("findBestRate", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dest),
      EthereumValue.fromUnsignedBigInt(srcAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new KyberNetwork__findBestRateResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  PERM_HINT_GET_RATE(): BigInt {
    let result = super.call("PERM_HINT_GET_RATE", []);

    return result[0].toBigInt();
  }

  try_PERM_HINT_GET_RATE(): CallResult<BigInt> {
    let result = super.tryCall("PERM_HINT_GET_RATE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getNumReserves(): BigInt {
    let result = super.call("getNumReserves", []);

    return result[0].toBigInt();
  }

  try_getNumReserves(): CallResult<BigInt> {
    let result = super.tryCall("getNumReserves", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getBalance(token: Address, user: Address): BigInt {
    let result = super.call("getBalance", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getBalance(token: Address, user: Address): CallResult<BigInt> {
    let result = super.tryCall("getBalance", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromAddress(user)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  listPairForReserve(
    reserve: Address,
    token: Address,
    ethToToken: boolean,
    tokenToEth: boolean,
    add: boolean
  ): boolean {
    let result = super.call("listPairForReserve", [
      EthereumValue.fromAddress(reserve),
      EthereumValue.fromAddress(token),
      EthereumValue.fromBoolean(ethToToken),
      EthereumValue.fromBoolean(tokenToEth),
      EthereumValue.fromBoolean(add)
    ]);

    return result[0].toBoolean();
  }

  try_listPairForReserve(
    reserve: Address,
    token: Address,
    ethToToken: boolean,
    tokenToEth: boolean,
    add: boolean
  ): CallResult<boolean> {
    let result = super.tryCall("listPairForReserve", [
      EthereumValue.fromAddress(reserve),
      EthereumValue.fromAddress(token),
      EthereumValue.fromBoolean(ethToToken),
      EthereumValue.fromBoolean(tokenToEth),
      EthereumValue.fromBoolean(add)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  admin(): Address {
    let result = super.call("admin", []);

    return result[0].toAddress();
  }

  try_admin(): CallResult<Address> {
    let result = super.tryCall("admin", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class RemoveAlerterCall extends EthereumCall {
  get inputs(): RemoveAlerterCall__Inputs {
    return new RemoveAlerterCall__Inputs(this);
  }

  get outputs(): RemoveAlerterCall__Outputs {
    return new RemoveAlerterCall__Outputs(this);
  }
}

export class RemoveAlerterCall__Inputs {
  _call: RemoveAlerterCall;

  constructor(call: RemoveAlerterCall) {
    this._call = call;
  }

  get alerter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAlerterCall__Outputs {
  _call: RemoveAlerterCall;

  constructor(call: RemoveAlerterCall) {
    this._call = call;
  }
}

export class TradeWithHintCall extends EthereumCall {
  get inputs(): TradeWithHintCall__Inputs {
    return new TradeWithHintCall__Inputs(this);
  }

  get outputs(): TradeWithHintCall__Outputs {
    return new TradeWithHintCall__Outputs(this);
  }
}

export class TradeWithHintCall__Inputs {
  _call: TradeWithHintCall;

  constructor(call: TradeWithHintCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get src(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get srcAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get dest(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get destAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get maxDestAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get minConversionRate(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get walletId(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get hint(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class TradeWithHintCall__Outputs {
  _call: TradeWithHintCall;

  constructor(call: TradeWithHintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetFeeBurnerCall extends EthereumCall {
  get inputs(): SetFeeBurnerCall__Inputs {
    return new SetFeeBurnerCall__Inputs(this);
  }

  get outputs(): SetFeeBurnerCall__Outputs {
    return new SetFeeBurnerCall__Outputs(this);
  }
}

export class SetFeeBurnerCall__Inputs {
  _call: SetFeeBurnerCall;

  constructor(call: SetFeeBurnerCall) {
    this._call = call;
  }

  get feeBurner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeBurnerCall__Outputs {
  _call: SetFeeBurnerCall;

  constructor(call: SetFeeBurnerCall) {
    this._call = call;
  }
}

export class RemoveReserveCall extends EthereumCall {
  get inputs(): RemoveReserveCall__Inputs {
    return new RemoveReserveCall__Inputs(this);
  }

  get outputs(): RemoveReserveCall__Outputs {
    return new RemoveReserveCall__Outputs(this);
  }
}

export class RemoveReserveCall__Inputs {
  _call: RemoveReserveCall;

  constructor(call: RemoveReserveCall) {
    this._call = call;
  }

  get reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveReserveCall__Outputs {
  _call: RemoveReserveCall;

  constructor(call: RemoveReserveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetWhiteListCall extends EthereumCall {
  get inputs(): SetWhiteListCall__Inputs {
    return new SetWhiteListCall__Inputs(this);
  }

  get outputs(): SetWhiteListCall__Outputs {
    return new SetWhiteListCall__Outputs(this);
  }
}

export class SetWhiteListCall__Inputs {
  _call: SetWhiteListCall;

  constructor(call: SetWhiteListCall) {
    this._call = call;
  }

  get whiteList(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWhiteListCall__Outputs {
  _call: SetWhiteListCall;

  constructor(call: SetWhiteListCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends EthereumCall {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sendTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}

export class AddAlerterCall extends EthereumCall {
  get inputs(): AddAlerterCall__Inputs {
    return new AddAlerterCall__Inputs(this);
  }

  get outputs(): AddAlerterCall__Outputs {
    return new AddAlerterCall__Outputs(this);
  }
}

export class AddAlerterCall__Inputs {
  _call: AddAlerterCall;

  constructor(call: AddAlerterCall) {
    this._call = call;
  }

  get newAlerter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAlerterCall__Outputs {
  _call: AddAlerterCall;

  constructor(call: AddAlerterCall) {
    this._call = call;
  }
}

export class SetExpectedRateCall extends EthereumCall {
  get inputs(): SetExpectedRateCall__Inputs {
    return new SetExpectedRateCall__Inputs(this);
  }

  get outputs(): SetExpectedRateCall__Outputs {
    return new SetExpectedRateCall__Outputs(this);
  }
}

export class SetExpectedRateCall__Inputs {
  _call: SetExpectedRateCall;

  constructor(call: SetExpectedRateCall) {
    this._call = call;
  }

  get expectedRate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetExpectedRateCall__Outputs {
  _call: SetExpectedRateCall;

  constructor(call: SetExpectedRateCall) {
    this._call = call;
  }
}

export class SetInfoCall extends EthereumCall {
  get inputs(): SetInfoCall__Inputs {
    return new SetInfoCall__Inputs(this);
  }

  get outputs(): SetInfoCall__Outputs {
    return new SetInfoCall__Outputs(this);
  }
}

export class SetInfoCall__Inputs {
  _call: SetInfoCall;

  constructor(call: SetInfoCall) {
    this._call = call;
  }

  get field(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetInfoCall__Outputs {
  _call: SetInfoCall;

  constructor(call: SetInfoCall) {
    this._call = call;
  }
}

export class TransferAdminCall extends EthereumCall {
  get inputs(): TransferAdminCall__Inputs {
    return new TransferAdminCall__Inputs(this);
  }

  get outputs(): TransferAdminCall__Outputs {
    return new TransferAdminCall__Outputs(this);
  }
}

export class TransferAdminCall__Inputs {
  _call: TransferAdminCall;

  constructor(call: TransferAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAdminCall__Outputs {
  _call: TransferAdminCall;

  constructor(call: TransferAdminCall) {
    this._call = call;
  }
}

export class SetEnableCall extends EthereumCall {
  get inputs(): SetEnableCall__Inputs {
    return new SetEnableCall__Inputs(this);
  }

  get outputs(): SetEnableCall__Outputs {
    return new SetEnableCall__Outputs(this);
  }
}

export class SetEnableCall__Inputs {
  _call: SetEnableCall;

  constructor(call: SetEnableCall) {
    this._call = call;
  }

  get _enable(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetEnableCall__Outputs {
  _call: SetEnableCall;

  constructor(call: SetEnableCall) {
    this._call = call;
  }
}

export class ClaimAdminCall extends EthereumCall {
  get inputs(): ClaimAdminCall__Inputs {
    return new ClaimAdminCall__Inputs(this);
  }

  get outputs(): ClaimAdminCall__Outputs {
    return new ClaimAdminCall__Outputs(this);
  }
}

export class ClaimAdminCall__Inputs {
  _call: ClaimAdminCall;

  constructor(call: ClaimAdminCall) {
    this._call = call;
  }
}

export class ClaimAdminCall__Outputs {
  _call: ClaimAdminCall;

  constructor(call: ClaimAdminCall) {
    this._call = call;
  }
}

export class TransferAdminQuicklyCall extends EthereumCall {
  get inputs(): TransferAdminQuicklyCall__Inputs {
    return new TransferAdminQuicklyCall__Inputs(this);
  }

  get outputs(): TransferAdminQuicklyCall__Outputs {
    return new TransferAdminQuicklyCall__Outputs(this);
  }
}

export class TransferAdminQuicklyCall__Inputs {
  _call: TransferAdminQuicklyCall;

  constructor(call: TransferAdminQuicklyCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAdminQuicklyCall__Outputs {
  _call: TransferAdminQuicklyCall;

  constructor(call: TransferAdminQuicklyCall) {
    this._call = call;
  }
}

export class AddOperatorCall extends EthereumCall {
  get inputs(): AddOperatorCall__Inputs {
    return new AddOperatorCall__Inputs(this);
  }

  get outputs(): AddOperatorCall__Outputs {
    return new AddOperatorCall__Outputs(this);
  }
}

export class AddOperatorCall__Inputs {
  _call: AddOperatorCall;

  constructor(call: AddOperatorCall) {
    this._call = call;
  }

  get newOperator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddOperatorCall__Outputs {
  _call: AddOperatorCall;

  constructor(call: AddOperatorCall) {
    this._call = call;
  }
}

export class AddReserveCall extends EthereumCall {
  get inputs(): AddReserveCall__Inputs {
    return new AddReserveCall__Inputs(this);
  }

  get outputs(): AddReserveCall__Outputs {
    return new AddReserveCall__Outputs(this);
  }
}

export class AddReserveCall__Inputs {
  _call: AddReserveCall;

  constructor(call: AddReserveCall) {
    this._call = call;
  }

  get reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isPermissionless(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AddReserveCall__Outputs {
  _call: AddReserveCall;

  constructor(call: AddReserveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveOperatorCall extends EthereumCall {
  get inputs(): RemoveOperatorCall__Inputs {
    return new RemoveOperatorCall__Inputs(this);
  }

  get outputs(): RemoveOperatorCall__Outputs {
    return new RemoveOperatorCall__Outputs(this);
  }
}

export class RemoveOperatorCall__Inputs {
  _call: RemoveOperatorCall;

  constructor(call: RemoveOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveOperatorCall__Outputs {
  _call: RemoveOperatorCall;

  constructor(call: RemoveOperatorCall) {
    this._call = call;
  }
}

export class SetParamsCall extends EthereumCall {
  get inputs(): SetParamsCall__Inputs {
    return new SetParamsCall__Inputs(this);
  }

  get outputs(): SetParamsCall__Outputs {
    return new SetParamsCall__Outputs(this);
  }
}

export class SetParamsCall__Inputs {
  _call: SetParamsCall;

  constructor(call: SetParamsCall) {
    this._call = call;
  }

  get _maxGasPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _negligibleRateDiff(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetParamsCall__Outputs {
  _call: SetParamsCall;

  constructor(call: SetParamsCall) {
    this._call = call;
  }
}

export class SetKyberProxyCall extends EthereumCall {
  get inputs(): SetKyberProxyCall__Inputs {
    return new SetKyberProxyCall__Inputs(this);
  }

  get outputs(): SetKyberProxyCall__Outputs {
    return new SetKyberProxyCall__Outputs(this);
  }
}

export class SetKyberProxyCall__Inputs {
  _call: SetKyberProxyCall;

  constructor(call: SetKyberProxyCall) {
    this._call = call;
  }

  get networkProxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetKyberProxyCall__Outputs {
  _call: SetKyberProxyCall;

  constructor(call: SetKyberProxyCall) {
    this._call = call;
  }
}

export class WithdrawEtherCall extends EthereumCall {
  get inputs(): WithdrawEtherCall__Inputs {
    return new WithdrawEtherCall__Inputs(this);
  }

  get outputs(): WithdrawEtherCall__Outputs {
    return new WithdrawEtherCall__Outputs(this);
  }
}

export class WithdrawEtherCall__Inputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sendTo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawEtherCall__Outputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }
}

export class ListPairForReserveCall extends EthereumCall {
  get inputs(): ListPairForReserveCall__Inputs {
    return new ListPairForReserveCall__Inputs(this);
  }

  get outputs(): ListPairForReserveCall__Outputs {
    return new ListPairForReserveCall__Outputs(this);
  }
}

export class ListPairForReserveCall__Inputs {
  _call: ListPairForReserveCall;

  constructor(call: ListPairForReserveCall) {
    this._call = call;
  }

  get reserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ethToToken(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get tokenToEth(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get add(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class ListPairForReserveCall__Outputs {
  _call: ListPairForReserveCall;

  constructor(call: ListPairForReserveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends EthereumCall {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
