// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class ExecuteTrade extends EthereumEvent {
  get params(): ExecuteTrade__Params {
    return new ExecuteTrade__Params(this);
  }
}

export class ExecuteTrade__Params {
  _event: ExecuteTrade;

  constructor(event: ExecuteTrade) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get src(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dest(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get actualSrcAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get actualDestAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class KyberNetworkSet extends EthereumEvent {
  get params(): KyberNetworkSet__Params {
    return new KyberNetworkSet__Params(this);
  }
}

export class KyberNetworkSet__Params {
  _event: KyberNetworkSet;

  constructor(event: KyberNetworkSet) {
    this._event = event;
  }

  get newNetworkContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldNetworkContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenWithdraw extends EthereumEvent {
  get params(): TokenWithdraw__Params {
    return new TokenWithdraw__Params(this);
  }
}

export class TokenWithdraw__Params {
  _event: TokenWithdraw;

  constructor(event: TokenWithdraw) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sendTo(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class EtherWithdraw extends EthereumEvent {
  get params(): EtherWithdraw__Params {
    return new EtherWithdraw__Params(this);
  }
}

export class EtherWithdraw__Params {
  _event: EtherWithdraw;

  constructor(event: EtherWithdraw) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sendTo(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferAdminPending extends EthereumEvent {
  get params(): TransferAdminPending__Params {
    return new TransferAdminPending__Params(this);
  }
}

export class TransferAdminPending__Params {
  _event: TransferAdminPending;

  constructor(event: TransferAdminPending) {
    this._event = event;
  }

  get pendingAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AdminClaimed extends EthereumEvent {
  get params(): AdminClaimed__Params {
    return new AdminClaimed__Params(this);
  }
}

export class AdminClaimed__Params {
  _event: AdminClaimed;

  constructor(event: AdminClaimed) {
    this._event = event;
  }

  get newAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AlerterAdded extends EthereumEvent {
  get params(): AlerterAdded__Params {
    return new AlerterAdded__Params(this);
  }
}

export class AlerterAdded__Params {
  _event: AlerterAdded;

  constructor(event: AlerterAdded) {
    this._event = event;
  }

  get newAlerter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isAdd(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OperatorAdded extends EthereumEvent {
  get params(): OperatorAdded__Params {
    return new OperatorAdded__Params(this);
  }
}

export class OperatorAdded__Params {
  _event: OperatorAdded;

  constructor(event: OperatorAdded) {
    this._event = event;
  }

  get newOperator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isAdd(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class KyberNetworkProxy__getExpectedRateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class KyberNetworkProxy extends SmartContract {
  static bind(address: Address): KyberNetworkProxy {
    return new KyberNetworkProxy("KyberNetworkProxy", address);
  }

  enabled(): boolean {
    let result = super.call("enabled", []);

    return result[0].toBoolean();
  }

  try_enabled(): CallResult<boolean> {
    let result = super.tryCall("enabled", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  pendingAdmin(): Address {
    let result = super.call("pendingAdmin", []);

    return result[0].toAddress();
  }

  try_pendingAdmin(): CallResult<Address> {
    let result = super.tryCall("pendingAdmin", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getOperators(): Array<Address> {
    let result = super.call("getOperators", []);

    return result[0].toAddressArray();
  }

  try_getOperators(): CallResult<Array<Address>> {
    let result = super.tryCall("getOperators", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddressArray());
  }

  swapTokenToEther(
    token: Address,
    srcAmount: BigInt,
    minConversionRate: BigInt
  ): BigInt {
    let result = super.call("swapTokenToEther", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(minConversionRate)
    ]);

    return result[0].toBigInt();
  }

  try_swapTokenToEther(
    token: Address,
    srcAmount: BigInt,
    minConversionRate: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("swapTokenToEther", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(minConversionRate)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  maxGasPrice(): BigInt {
    let result = super.call("maxGasPrice", []);

    return result[0].toBigInt();
  }

  try_maxGasPrice(): CallResult<BigInt> {
    let result = super.tryCall("maxGasPrice", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  kyberNetworkContract(): Address {
    let result = super.call("kyberNetworkContract", []);

    return result[0].toAddress();
  }

  try_kyberNetworkContract(): CallResult<Address> {
    let result = super.tryCall("kyberNetworkContract", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getUserCapInWei(user: Address): BigInt {
    let result = super.call("getUserCapInWei", [
      EthereumValue.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getUserCapInWei(user: Address): CallResult<BigInt> {
    let result = super.tryCall("getUserCapInWei", [
      EthereumValue.fromAddress(user)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  swapTokenToToken(
    src: Address,
    srcAmount: BigInt,
    dest: Address,
    minConversionRate: BigInt
  ): BigInt {
    let result = super.call("swapTokenToToken", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromAddress(dest),
      EthereumValue.fromUnsignedBigInt(minConversionRate)
    ]);

    return result[0].toBigInt();
  }

  try_swapTokenToToken(
    src: Address,
    srcAmount: BigInt,
    dest: Address,
    minConversionRate: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("swapTokenToToken", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromAddress(dest),
      EthereumValue.fromUnsignedBigInt(minConversionRate)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getAlerters(): Array<Address> {
    let result = super.call("getAlerters", []);

    return result[0].toAddressArray();
  }

  try_getAlerters(): CallResult<Array<Address>> {
    let result = super.tryCall("getAlerters", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddressArray());
  }

  getExpectedRate(
    src: Address,
    dest: Address,
    srcQty: BigInt
  ): KyberNetworkProxy__getExpectedRateResult {
    let result = super.call("getExpectedRate", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dest),
      EthereumValue.fromUnsignedBigInt(srcQty)
    ]);

    return new KyberNetworkProxy__getExpectedRateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getExpectedRate(
    src: Address,
    dest: Address,
    srcQty: BigInt
  ): CallResult<KyberNetworkProxy__getExpectedRateResult> {
    let result = super.tryCall("getExpectedRate", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dest),
      EthereumValue.fromUnsignedBigInt(srcQty)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new KyberNetworkProxy__getExpectedRateResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getUserCapInTokenWei(user: Address, token: Address): BigInt {
    let result = super.call("getUserCapInTokenWei", [
      EthereumValue.fromAddress(user),
      EthereumValue.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_getUserCapInTokenWei(user: Address, token: Address): CallResult<BigInt> {
    let result = super.tryCall("getUserCapInTokenWei", [
      EthereumValue.fromAddress(user),
      EthereumValue.fromAddress(token)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  info(field: Bytes): BigInt {
    let result = super.call("info", [EthereumValue.fromFixedBytes(field)]);

    return result[0].toBigInt();
  }

  try_info(field: Bytes): CallResult<BigInt> {
    let result = super.tryCall("info", [EthereumValue.fromFixedBytes(field)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getBalance(token: Address, user: Address): BigInt {
    let result = super.call("getBalance", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getBalance(token: Address, user: Address): CallResult<BigInt> {
    let result = super.tryCall("getBalance", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromAddress(user)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", []);

    return result[0].toAddress();
  }

  try_admin(): CallResult<Address> {
    let result = super.tryCall("admin", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class RemoveAlerterCall extends EthereumCall {
  get inputs(): RemoveAlerterCall__Inputs {
    return new RemoveAlerterCall__Inputs(this);
  }

  get outputs(): RemoveAlerterCall__Outputs {
    return new RemoveAlerterCall__Outputs(this);
  }
}

export class RemoveAlerterCall__Inputs {
  _call: RemoveAlerterCall;

  constructor(call: RemoveAlerterCall) {
    this._call = call;
  }

  get alerter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAlerterCall__Outputs {
  _call: RemoveAlerterCall;

  constructor(call: RemoveAlerterCall) {
    this._call = call;
  }
}

export class TradeWithHintCall extends EthereumCall {
  get inputs(): TradeWithHintCall__Inputs {
    return new TradeWithHintCall__Inputs(this);
  }

  get outputs(): TradeWithHintCall__Outputs {
    return new TradeWithHintCall__Outputs(this);
  }
}

export class TradeWithHintCall__Inputs {
  _call: TradeWithHintCall;

  constructor(call: TradeWithHintCall) {
    this._call = call;
  }

  get src(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get srcAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get dest(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get destAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get maxDestAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get minConversionRate(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get walletId(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get hint(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class TradeWithHintCall__Outputs {
  _call: TradeWithHintCall;

  constructor(call: TradeWithHintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapTokenToEtherCall extends EthereumCall {
  get inputs(): SwapTokenToEtherCall__Inputs {
    return new SwapTokenToEtherCall__Inputs(this);
  }

  get outputs(): SwapTokenToEtherCall__Outputs {
    return new SwapTokenToEtherCall__Outputs(this);
  }
}

export class SwapTokenToEtherCall__Inputs {
  _call: SwapTokenToEtherCall;

  constructor(call: SwapTokenToEtherCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get srcAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minConversionRate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SwapTokenToEtherCall__Outputs {
  _call: SwapTokenToEtherCall;

  constructor(call: SwapTokenToEtherCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawTokenCall extends EthereumCall {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sendTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}

export class AddAlerterCall extends EthereumCall {
  get inputs(): AddAlerterCall__Inputs {
    return new AddAlerterCall__Inputs(this);
  }

  get outputs(): AddAlerterCall__Outputs {
    return new AddAlerterCall__Outputs(this);
  }
}

export class AddAlerterCall__Inputs {
  _call: AddAlerterCall;

  constructor(call: AddAlerterCall) {
    this._call = call;
  }

  get newAlerter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAlerterCall__Outputs {
  _call: AddAlerterCall;

  constructor(call: AddAlerterCall) {
    this._call = call;
  }
}

export class SwapTokenToTokenCall extends EthereumCall {
  get inputs(): SwapTokenToTokenCall__Inputs {
    return new SwapTokenToTokenCall__Inputs(this);
  }

  get outputs(): SwapTokenToTokenCall__Outputs {
    return new SwapTokenToTokenCall__Outputs(this);
  }
}

export class SwapTokenToTokenCall__Inputs {
  _call: SwapTokenToTokenCall;

  constructor(call: SwapTokenToTokenCall) {
    this._call = call;
  }

  get src(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get srcAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get dest(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get minConversionRate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapTokenToTokenCall__Outputs {
  _call: SwapTokenToTokenCall;

  constructor(call: SwapTokenToTokenCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferAdminCall extends EthereumCall {
  get inputs(): TransferAdminCall__Inputs {
    return new TransferAdminCall__Inputs(this);
  }

  get outputs(): TransferAdminCall__Outputs {
    return new TransferAdminCall__Outputs(this);
  }
}

export class TransferAdminCall__Inputs {
  _call: TransferAdminCall;

  constructor(call: TransferAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAdminCall__Outputs {
  _call: TransferAdminCall;

  constructor(call: TransferAdminCall) {
    this._call = call;
  }
}

export class ClaimAdminCall extends EthereumCall {
  get inputs(): ClaimAdminCall__Inputs {
    return new ClaimAdminCall__Inputs(this);
  }

  get outputs(): ClaimAdminCall__Outputs {
    return new ClaimAdminCall__Outputs(this);
  }
}

export class ClaimAdminCall__Inputs {
  _call: ClaimAdminCall;

  constructor(call: ClaimAdminCall) {
    this._call = call;
  }
}

export class ClaimAdminCall__Outputs {
  _call: ClaimAdminCall;

  constructor(call: ClaimAdminCall) {
    this._call = call;
  }
}

export class SwapEtherToTokenCall extends EthereumCall {
  get inputs(): SwapEtherToTokenCall__Inputs {
    return new SwapEtherToTokenCall__Inputs(this);
  }

  get outputs(): SwapEtherToTokenCall__Outputs {
    return new SwapEtherToTokenCall__Outputs(this);
  }
}

export class SwapEtherToTokenCall__Inputs {
  _call: SwapEtherToTokenCall;

  constructor(call: SwapEtherToTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minConversionRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SwapEtherToTokenCall__Outputs {
  _call: SwapEtherToTokenCall;

  constructor(call: SwapEtherToTokenCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferAdminQuicklyCall extends EthereumCall {
  get inputs(): TransferAdminQuicklyCall__Inputs {
    return new TransferAdminQuicklyCall__Inputs(this);
  }

  get outputs(): TransferAdminQuicklyCall__Outputs {
    return new TransferAdminQuicklyCall__Outputs(this);
  }
}

export class TransferAdminQuicklyCall__Inputs {
  _call: TransferAdminQuicklyCall;

  constructor(call: TransferAdminQuicklyCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAdminQuicklyCall__Outputs {
  _call: TransferAdminQuicklyCall;

  constructor(call: TransferAdminQuicklyCall) {
    this._call = call;
  }
}

export class AddOperatorCall extends EthereumCall {
  get inputs(): AddOperatorCall__Inputs {
    return new AddOperatorCall__Inputs(this);
  }

  get outputs(): AddOperatorCall__Outputs {
    return new AddOperatorCall__Outputs(this);
  }
}

export class AddOperatorCall__Inputs {
  _call: AddOperatorCall;

  constructor(call: AddOperatorCall) {
    this._call = call;
  }

  get newOperator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddOperatorCall__Outputs {
  _call: AddOperatorCall;

  constructor(call: AddOperatorCall) {
    this._call = call;
  }
}

export class SetKyberNetworkContractCall extends EthereumCall {
  get inputs(): SetKyberNetworkContractCall__Inputs {
    return new SetKyberNetworkContractCall__Inputs(this);
  }

  get outputs(): SetKyberNetworkContractCall__Outputs {
    return new SetKyberNetworkContractCall__Outputs(this);
  }
}

export class SetKyberNetworkContractCall__Inputs {
  _call: SetKyberNetworkContractCall;

  constructor(call: SetKyberNetworkContractCall) {
    this._call = call;
  }

  get _kyberNetworkContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetKyberNetworkContractCall__Outputs {
  _call: SetKyberNetworkContractCall;

  constructor(call: SetKyberNetworkContractCall) {
    this._call = call;
  }
}

export class RemoveOperatorCall extends EthereumCall {
  get inputs(): RemoveOperatorCall__Inputs {
    return new RemoveOperatorCall__Inputs(this);
  }

  get outputs(): RemoveOperatorCall__Outputs {
    return new RemoveOperatorCall__Outputs(this);
  }
}

export class RemoveOperatorCall__Inputs {
  _call: RemoveOperatorCall;

  constructor(call: RemoveOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveOperatorCall__Outputs {
  _call: RemoveOperatorCall;

  constructor(call: RemoveOperatorCall) {
    this._call = call;
  }
}

export class TradeCall extends EthereumCall {
  get inputs(): TradeCall__Inputs {
    return new TradeCall__Inputs(this);
  }

  get outputs(): TradeCall__Outputs {
    return new TradeCall__Outputs(this);
  }
}

export class TradeCall__Inputs {
  _call: TradeCall;

  constructor(call: TradeCall) {
    this._call = call;
  }

  get src(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get srcAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get dest(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get destAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get maxDestAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get minConversionRate(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get walletId(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class TradeCall__Outputs {
  _call: TradeCall;

  constructor(call: TradeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawEtherCall extends EthereumCall {
  get inputs(): WithdrawEtherCall__Inputs {
    return new WithdrawEtherCall__Inputs(this);
  }

  get outputs(): WithdrawEtherCall__Outputs {
    return new WithdrawEtherCall__Outputs(this);
  }
}

export class WithdrawEtherCall__Inputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sendTo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawEtherCall__Outputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
